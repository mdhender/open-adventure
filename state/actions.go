// Code generated by yaml2go on 2022-08-16T20:50:00Z; DO NOT EDIT.

// Open Adventure - a clone of Open Adventure written in Go
// Copyright (c) 2022 Michael D Henderson
// SPDX-License-Identifier: BSD-2-clause

package state

// Actions implements an ordered map of actions.
// Use `Seq` to access sequentially or `Map` to access by key.
type Actions struct {
    Seq   []*Action              // sequential accessor
    Map   map[string]*Action     // tag accessor
    Words map[string]*Action     // verb (or abbreviated verb) accessor
}

// Action is autogenerated
type Action struct {
    Tag       string     // unique id for the action (was the key in the original YAML)
    Message   []string   // TODO: document
    NoAction  bool       // TODO: document
    OldStyle  bool       // TODO: document
    Words     []string   // list of verbs (or abbreviated verbs) that map to this action
}

// generateActions returns the initial state for actions
func generateActions() *Actions {
    actions := &Actions{
        Map: make(map[string]*Action),
        Words: make(map[string]*Action),
    }

    // seq: 0 tag: ACT_NULL
    action := &Action{
        Tag: "ACT_NULL",
        OldStyle: true,
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 1 tag: CARRY
    action = &Action{
        Tag: "CARRY",
        Message: []string{
            "You are already carrying it!",
        },
        Words: []string{ // TODO: are these needed?
            "g",
            "carry",
            "take",
            "keep",
            "catch",
            "steal",
            "captu",
            "get",
            "tote",
            "snarf",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 2 tag: DROP
    action = &Action{
        Tag: "DROP",
        Message: []string{
            "You aren't carrying it!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "drop",
            "relea",
            "free",
            "disca",
            "dump",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 3 tag: SAY
    action = &Action{
        Tag: "SAY",
        Message: []string{
            "NO_MESSAGE",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "say",
            "chant",
            "sing",
            "utter",
            "mumbl",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 4 tag: UNLOCK
    action = &Action{
        Tag: "UNLOCK",
        Message: []string{
            "I don't know how to lock or unlock such a thing.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "unloc",
            "open",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 5 tag: NOTHING
    action = &Action{
        Tag: "NOTHING",
        Message: []string{
            "NO_MESSAGE",
        },
        Words: []string{ // TODO: are these needed?
            "z",
            "nothi",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 6 tag: LOCK
    action = &Action{
        Tag: "LOCK",
        Message: []string{
            "I don't know how to lock or unlock such a thing.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "lock",
            "close",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 7 tag: LIGHT
    action = &Action{
        Tag: "LIGHT",
        Message: []string{
            "I'm afraid I don't understand.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "light",
            "on",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 8 tag: EXTINGUISH
    action = &Action{
        Tag: "EXTINGUISH",
        Message: []string{
            "I'm afraid I don't understand.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "extin",
            "off",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 9 tag: WAVE
    action = &Action{
        Tag: "WAVE",
        Message: []string{
            "Nothing happens.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "wave",
            "shake",
            "swing",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 10 tag: TAME
    action = &Action{
        Tag: "TAME",
        Message: []string{
            "I'm game.  Would you care to explain how?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "calm",
            "placa",
            "tame",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 11 tag: GO
    action = &Action{
        Tag: "GO",
        Message: []string{
            "Where?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "walk",
            "run",
            "trave",
            "go",
            "proce",
            "conti",
            "explo",
            "follo",
            "turn",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 12 tag: ATTACK
    action = &Action{
        Tag: "ATTACK",
        Message: []string{
            "Don't be ridiculous!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "attac",
            "kill",
            "fight",
            "hit",
            "strik",
            "slay",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 13 tag: POUR
    action = &Action{
        Tag: "POUR",
        Message: []string{
            "You aren't carrying it!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "pour",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 14 tag: EAT
    action = &Action{
        Tag: "EAT",
        Message: []string{
            "Don't be ridiculous!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "eat",
            "devou",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 15 tag: DRINK
    action = &Action{
        Tag: "DRINK",
        Message: []string{
            "You have taken a drink from the stream.  The water tastes strongly of",
            "minerals, but is not unpleasant.  It is extremely cold.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "drink",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 16 tag: RUB
    action = &Action{
        Tag: "RUB",
        Message: []string{
            "Rubbing the electric lamp is not particularly rewarding.  Anyway,",
            "nothing exciting happens.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "rub",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 17 tag: THROW
    action = &Action{
        Tag: "THROW",
        Message: []string{
            "You aren't carrying it!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "throw",
            "toss",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 18 tag: QUIT
    action = &Action{
        Tag: "QUIT",
        Message: []string{
            "Huh?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "quit",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 19 tag: FIND
    action = &Action{
        Tag: "FIND",
        Message: []string{
            "I can only tell you what you see as you move about and manipulate",
            "things.  I cannot tell you where remote things are.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "find",
            "where",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 20 tag: INVENTORY
    action = &Action{
        Tag: "INVENTORY",
        Message: []string{
            "I can only tell you what you see as you move about and manipulate",
            "things.  I cannot tell you where remote things are.",
        },
        Words: []string{ // TODO: are these needed?
            "i",
            "inven",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 21 tag: FEED
    action = &Action{
        Tag: "FEED",
        Message: []string{
            "There is nothing here to eat.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "feed",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 22 tag: FILL
    action = &Action{
        Tag: "FILL",
        Message: []string{
            "You can't fill that.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fill",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 23 tag: BLAST
    action = &Action{
        Tag: "BLAST",
        Message: []string{
            "Blasting requires dynamite.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "blast",
            "deton",
            "ignit",
            "blowu",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 24 tag: SCORE
    action = &Action{
        Tag: "SCORE",
        Message: []string{
            "Huh?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "score",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 25 tag: FEE
    action = &Action{
        Tag: "FEE",
        Message: []string{
            "I don't know how.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fee",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 26 tag: FIE
    action = &Action{
        Tag: "FIE",
        Message: []string{
            "I don't know how.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fie",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 27 tag: FOE
    action = &Action{
        Tag: "FOE",
        Message: []string{
            "I don't know how.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "foe",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 28 tag: FOO
    action = &Action{
        Tag: "FOO",
        Message: []string{
            "I don't know how.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "foo",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 29 tag: FUM
    action = &Action{
        Tag: "FUM",
        Message: []string{
            "I don't know how.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fum",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 30 tag: BRIEF
    action = &Action{
        Tag: "BRIEF",
        Message: []string{
            "On what?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "brief",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 31 tag: READ
    action = &Action{
        Tag: "READ",
        Message: []string{
            "I'm afraid I don't understand.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "read",
            "perus",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 32 tag: BREAK
    action = &Action{
        Tag: "BREAK",
        Message: []string{
            "It is beyond your power to do that.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "break",
            "shatt",
            "smash",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 33 tag: WAKE
    action = &Action{
        Tag: "WAKE",
        Message: []string{
            "Don't be ridiculous!",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "wake",
            "distu",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 34 tag: SAVE
    action = &Action{
        Tag: "SAVE",
        Message: []string{
            "Huh?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "suspe",
            "pause",
            "save",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 35 tag: RESUME
    action = &Action{
        Tag: "RESUME",
        Message: []string{
            "Huh?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "resum",
            "resta",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 36 tag: FLY
    action = &Action{
        Tag: "FLY",
        Message: []string{
            "I'm game.  Would you care to explain how?",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fly",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 37 tag: LISTEN
    action = &Action{
        Tag: "LISTEN",
        Message: []string{
            "I'm afraid I don't understand.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "liste",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 38 tag: PART
    action = &Action{
        Tag: "PART",
        Message: []string{
            "Nothing happens.",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "z'zzz",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 39 tag: SEED
    action = &Action{
        Tag: "SEED",
        Message: []string{
            "Seed set to %d",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "seed",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 40 tag: WASTE
    action = &Action{
        Tag: "WASTE",
        Message: []string{
            "Game limit is now %d",
        },
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "waste",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 41 tag: ACT_UNKNOWN
    action = &Action{
        Tag: "ACT_UNKNOWN",
        Message: []string{
            "Huh?",
        },
        OldStyle: true,
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 42 tag: THANKYOU
    action = &Action{
        Tag: "THANKYOU",
        Message: []string{
            "You're quite welcome.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "thank",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 43 tag: INVALIDMAGIC
    action = &Action{
        Tag: "INVALIDMAGIC",
        Message: []string{
            "Good try, but that is an old worn-out magic word.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "sesam",
            "opens",
            "abra",
            "abrac",
            "shaza",
            "hocus",
            "pocus",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 44 tag: HELP
    action = &Action{
        Tag: "HELP",
        Message: []string{
            "I know of places, actions, and things.  Most of my vocabulary",
            "describes places and is used to move you there.  To move, try words",
            "like forest, building, downstream, enter, east, west, north, south,",
            "up, or down.  I know about a few special objects, like a black rod",
            "hidden in the cave.  These objects can be manipulated using some of",
            "the action words that I know.  Usually you will need to give both the",
            "object and action words (in either order), but sometimes I can infer",
            "the object from the verb alone.  Some objects also imply verbs; in",
            "particular, \"inventory\" implies \"take inventory\", which causes me to",
            "give you a list of what you're carrying.  Some objects have unexpected",
            "effects; the effects are not always desirable!  Usually people having",
            "trouble moving just need to try a few more words.  Usually people",
            "trying unsuccessfully to manipulate an object are attempting something",
            "beyond their (or my!) capabilities and should try a completely",
            "different tack.  One point often confusing to beginners is that, when",
            "there are several ways to go in a certain direction (e.g., if there",
            "are several holes in a wall), choosing that direction in effect",
            "chooses one of the ways at random; often, though, by specifying the",
            "place you want to reach you can guarantee choosing the right path.",
            "Also, to speed the game you can sometimes move long distances with a",
            "single word.  For example, \"building\" usually gets you to the building",
            "from anywhere above ground except when lost in the forest.  Also, note",
            "that cave passages and forest paths turn a lot, so leaving one place",
            "heading north doesn't guarantee entering the next from the south.",
            "However (another important point), except when you've used a \"long",
            "distance\" word such as \"building\", there is always a way to go back",
            "where you just came from unless I warn you to the contrary, even",
            "though the direction that takes you back might not be the reverse of",
            "what got you here.  Good luck, and have fun!",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "help",
            "?",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 45 tag: NO
    action = &Action{
        Tag: "NO",
        Message: []string{
            "OK",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "no",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 46 tag: TREE
    action = &Action{
        Tag: "TREE",
        Message: []string{
            "The trees of the forest are large hardwood oak and maple, with an",
            "occasional grove of pine or spruce.  There is quite a bit of under-",
            "growth, largely birch and ash saplings plus nondescript bushes of",
            "various sorts.  This time of year visibility is quite restricted by",
            "all the leaves, but travel is quite easy if you detour around the",
            "spruce and berry bushes.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "tree",
            "trees",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 47 tag: DIG
    action = &Action{
        Tag: "DIG",
        Message: []string{
            "Digging without a shovel is quite impractical.  Even with a shovel",
            "progress is unlikely.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "dig",
            "excav",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 48 tag: LOST
    action = &Action{
        Tag: "LOST",
        Message: []string{
            "I'm as confused as you are.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "lost",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 49 tag: MIST
    action = &Action{
        Tag: "MIST",
        Message: []string{
            "Mist is a white vapor, usually water, seen from time to time in",
            "caverns.  It can be found anywhere but is frequently a sign of a deep",
            "pit leading down to water.'",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "mist",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 50 tag: FBOMB
    action = &Action{
        Tag: "FBOMB",
        Message: []string{
            "Watch it!",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "fuck",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 51 tag: STOP
    action = &Action{
        Tag: "STOP",
        Message: []string{
            "I don't know the word \"stop\".  Use \"quit\" if you want to give up.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "stop",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 52 tag: INFO
    action = &Action{
        Tag: "INFO",
        Message: []string{
            "For a summary of the most recent changes to the game, say \"news\".",
            "If you want to end your adventure early, say \"quit\".  To suspend your",
            "adventure such that you can continue later, say \"suspend\" (or \"pause\"",
            "or \"save\").  To see how well you're doing, say \"score\".  To get full",
            "credit for a treasure, you must have left it safely in the building,",
            "though you get partial credit just for locating it.  You lose points",
            "for getting killed, or for quitting, though the former costs you more.",
            "There are also points based on how much (if any) of the cave you've",
            "managed to explore; in particular, there is a large bonus just for",
            "getting in (to distinguish the beginners from the rest of the pack),",
            "and there are other ways to determine whether you've been through some",
            "of the more harrowing sections.  If you think you've found all the",
            "treasures, just keep exploring for a while.  If nothing interesting",
            "happens, you haven't found them all yet.  If something interesting",
            "*DOES* happen (incidentally, there *ARE* ways to hasten things along),",
            "it means you're getting a bonus and have an opportunity to garner many",
            "more points in the Master's section.  I may occasionally offer hints",
            "if you seem to be having trouble.  If I do, I'll warn you in advance",
            "how much it will affect your score to accept the hints.  Finally, to",
            "save time, you may specify \"brief\", which tells me never to repeat the",
            "full description of a place unless you explicitly ask me to.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "info",
            "infor",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 53 tag: SWIM
    action = &Action{
        Tag: "SWIM",
        Message: []string{
            "I don't know how.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "swim",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 54 tag: WIZARD
    action = &Action{
        Tag: "WIZARD",
        Message: []string{
            "Wizards are not to be disturbed by such as you.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "wizar",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 55 tag: YES
    action = &Action{
        Tag: "YES",
        Message: []string{
            "Guess again.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "yes",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 56 tag: NEWS
    action = &Action{
        Tag: "NEWS",
        Message: []string{
            "Open Adventure is an author-approved open-source release of",
            "Version 2.5 with, as yet, no gameplay changes.",
            "Version 2.5 was essentially the same as Version II; the cave and the",
            "hazards therein are unchanged, and top score is still 430 points.",
            "There are a few more hints, especially for some of the more obscure",
            "puzzles.  There are a few minor bugfixes and cosmetic changes.  You",
            "can now save a game and resume it at once (formerly you had to wait a",
            "while first), but it now costs you a few points each time you save the",
            "game.  Saved games are now stored in much smaller files than before.",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "news",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }

    // seq: 57 tag: ACT_VERSION
    action = &Action{
        Tag: "ACT_VERSION",
        Message: []string{
            "There is a puff of orange smoke; within it, fiery runes spell out:",
            "",
            "\\tOpen Adventure %V - http://www.catb.org/esr/open-adventure/",
        },
        NoAction: true,
        OldStyle: true,
        Words: []string{ // TODO: are these needed?
            "versi",
        },
    }
    actions.Seq = append(actions.Seq, action)
    actions.Map[action.Tag] = action
    for _, s := range action.Words {
        actions.Words[s] = action
    }


    return actions
}

