/*
 * Open Adventure - a clone of Open Adventure written in Go
 * Copyright (c) 2022 Michael D Henderson
 * SPDX-License-Identifier: BSD-2-clause
 */

package main

import (
	"fmt"
	"io"
	"strings"
)

// LOCATION is used to load the YAML data for locations
type LOCATION struct {
	Description struct {
		Long  string
		Short string
	} `yaml:"description"`
	Conditions map[string]bool
	Hints      []*HINT
	Loud       bool
	Sound      string
	Travels    []*TRAVEL `yaml:"travel"`
}

// HINT is used to load the YAML data for hints
type HINT struct {
	Name     string
	Number   int
	Turns    int
	Penalty  int
	Question string
	Hint     string
	// Hints will be populated by our loader. it's added as a convenience to
	// store the hint string after we've split it on the newlines.
	Hints []string `yaml:"-"`
}

// TRAVEL is used to load the YAML data for travel
type TRAVEL struct {
	Verbs      []string
	Conditions []string `yaml:"cond"`
	Actions    []string `yaml:"action"`
}

// GenerateLocations will convert locations to go code
func (y *YAML) GenerateLocations(w io.Writer) error {
	_, _ = fmt.Fprintf(w, "// Locations is an ordered map of location data.\n")
	_, _ = fmt.Fprintf(w, "// Use `Seq` to access sequentially or `Map` to access by key.\n")
	_, _ = fmt.Fprintf(w, "type Locations struct {\n")
	_, _ = fmt.Fprintf(w, "    Seq []*Location          // sequential accessor\n")
	_, _ = fmt.Fprintf(w, "    Map map[string]*Location // tag accessor for actions\n")
	_, _ = fmt.Fprintf(w, "}\n\n")

	_, _ = fmt.Fprintf(w, "// Location is the data for every 'room' in the adventure.\n")
	_, _ = fmt.Fprintf(w, "type Location struct {\n")
	_, _ = fmt.Fprintf(w, "    Enum       int\n")
	_, _ = fmt.Fprintf(w, "    Tag        string\n")
	_, _ = fmt.Fprintf(w, "    ShortDescr string\n")
	_, _ = fmt.Fprintf(w, "    LongDescr  []string\n")
	_, _ = fmt.Fprintf(w, "    Conditions map[string]bool\n")
	_, _ = fmt.Fprintf(w, "    Loud       bool\n")
	_, _ = fmt.Fprintf(w, "    Sound      string\n")
	_, _ = fmt.Fprintf(w, "    Travels    []*Travel\n")
	_, _ = fmt.Fprintf(w, "    Hints      []*Hint\n")
	_, _ = fmt.Fprintf(w, "}\n")
	_, _ = fmt.Fprintf(w, "\n")

	_, _ = fmt.Fprintf(w, "// Hint is autogenerated\n")
	_, _ = fmt.Fprintf(w, "type Hint struct {\n")
	_, _ = fmt.Fprintf(w, "    Name     string\n")
	_, _ = fmt.Fprintf(w, "    Question string\n")
	_, _ = fmt.Fprintf(w, "    Hint     []string\n")
	_, _ = fmt.Fprintf(w, "    Number   int\n")
	_, _ = fmt.Fprintf(w, "    Penalty  int\n")
	_, _ = fmt.Fprintf(w, "    Turns    int\n")
	_, _ = fmt.Fprintf(w, "}\n")
	_, _ = fmt.Fprintf(w, "\n")

	_, _ = fmt.Fprintf(w, "// Travel is autogenerated\n")
	_, _ = fmt.Fprintf(w, "type Travel struct {\n")
	_, _ = fmt.Fprintf(w, "    Verbs      []string\n")
	_, _ = fmt.Fprintf(w, "    Conditions []string\n")
	_, _ = fmt.Fprintf(w, "    Actions    []string\n")
	_, _ = fmt.Fprintf(w, "}\n")
	_, _ = fmt.Fprintf(w, "\n")

	_, _ = fmt.Fprintf(w, "// generateLocations returns the initial state for locations\n")
	_, _ = fmt.Fprintf(w, "func generateLocations() *Locations {\n")
	_, _ = fmt.Fprintf(w, "    locations := &Locations{\n")
	_, _ = fmt.Fprintf(w, "        Map: make(map[string]*Location),\n")
	_, _ = fmt.Fprintf(w, "    }\n")
	for i, locationMap := range y.Locations {
		_, _ = fmt.Fprintf(w, "\n")
		for tag, location := range locationMap {
			_, _ = fmt.Fprintf(w, "    // seq: %d tag: %s\n", i, tag)
			if i == 0 {
				_, _ = fmt.Fprintf(w, "    location := &Location{\n")
			} else {
				_, _ = fmt.Fprintf(w, "    location = &Location{\n")
			}
			_, _ = fmt.Fprintf(w, "        Enum: %d,\n", i)
			_, _ = fmt.Fprintf(w, "        Tag: %q,\n", tag)
			if len(location.Description.Short) != 0 {
				_, _ = fmt.Fprintf(w, "        ShortDescr: %q,\n", location.Description.Short)
			}
			if len(location.Description.Long) != 0 {
				_, _ = fmt.Fprintf(w, "        LongDescr: []string{\n")
				for _, s := range strings.Split(location.Description.Long, "\n") {
					_, _ = fmt.Fprintf(w, "            %q,\n", s)
				}
				_, _ = fmt.Fprintf(w, "        },\n")
			}
			if len(location.Sound) != 0 {
				_, _ = fmt.Fprintf(w, "        Sound: %q,\n", location.Sound)
			}
			if len(location.Conditions) != 0 {
				_, _ = fmt.Fprintf(w, "        Conditions: make(map[string]bool),\n")
			}
			_, _ = fmt.Fprintf(w, "    }\n")
			for ck, cv := range location.Conditions {
				_, _ = fmt.Fprintf(w, "    location.Conditions[%q] = %v\n", ck, cv)
			}
			for _, hint := range location.Hints {
				_, _ = fmt.Fprintf(w, "    location.Hints = append(location.Hints, &Hint{\n")
				_, _ = fmt.Fprintf(w, "        Name: %q,\n", hint.Name)
				_, _ = fmt.Fprintf(w, "        Question: %q,\n", hint.Question)
				_, _ = fmt.Fprintf(w, "        Hint: []string{\n")
				for _, s := range hint.Hints {
					_, _ = fmt.Fprintf(w, "            %q,\n", s)
				}
				_, _ = fmt.Fprintf(w, "        },\n")
				_, _ = fmt.Fprintf(w, "        Number: %d,\n", hint.Number)
				_, _ = fmt.Fprintf(w, "        Penalty: %d,\n", hint.Penalty)
				_, _ = fmt.Fprintf(w, "        Turns: %d,\n", hint.Turns)
				_, _ = fmt.Fprintf(w, "    })\n")
			}
			for _, travel := range location.Travels {
				_, _ = fmt.Fprintf(w, "    location.Travels = append(location.Travels, &Travel{\n")
				if len(travel.Verbs) != 0 {
					_, _ = fmt.Fprintf(w, "        Verbs: []string{\n")
					for _, s := range travel.Verbs {
						_, _ = fmt.Fprintf(w, "            %q,\n", s)
					}
					_, _ = fmt.Fprintf(w, "        },\n")
				}
				if len(travel.Conditions) != 0 {
					_, _ = fmt.Fprintf(w, "        Conditions: []string{\n")
					for _, s := range travel.Conditions {
						_, _ = fmt.Fprintf(w, "            %q,\n", s)
					}
					_, _ = fmt.Fprintf(w, "        },\n")
				}
				if len(travel.Actions) != 0 {
					_, _ = fmt.Fprintf(w, "        Actions: []string{\n")
					for _, s := range travel.Actions {
						_, _ = fmt.Fprintf(w, "            %q,\n", s)
					}
					_, _ = fmt.Fprintf(w, "        },\n")
				}
				_, _ = fmt.Fprintf(w, "    })\n")
			}
			_, _ = fmt.Fprintf(w, "    locations.Seq = append(locations.Seq, location)\n")
			_, _ = fmt.Fprintf(w, "    locations.Map[location.Tag] = location\n")
		}
	}
	_, _ = fmt.Fprintf(w, "\n")
	_, _ = fmt.Fprintf(w, "    return locations\n")
	_, _ = fmt.Fprintf(w, "}\n")
	_, _ = fmt.Fprintf(w, "\n")

	return nil
}
