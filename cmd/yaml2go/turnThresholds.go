/*
 * Open Adventure - a clone of Open Adventure written in Go
 * Copyright (c) 2022 Michael D Henderson
 * SPDX-License-Identifier: BSD-2-clause
 */

package main

import (
	"fmt"
	"io"
	"strings"
)

// TURNTHRESHOLD is used to load the YAML data for turn thresholds
type TURNTHRESHOLD struct {
	Threshold int
	PointLoss int `yaml:"point_loss"`
	Message   string
}

// GenerateTurnThresholds convert turn thresholds to go code.
func (y *YAML) GenerateTurnThresholds(w io.Writer) error {
	fmt.Fprintf(w, "// TurnThreshold is autogenerated\n")
	fmt.Fprintf(w, "type TurnThreshold struct {\n")
	fmt.Fprintf(w, "    Threshold int\n")
	fmt.Fprintf(w, "    PointLoss int\n")
	fmt.Fprintf(w, "    Message   []string\n")
	fmt.Fprintf(w, "}\n\n")

	fmt.Fprintf(w, "// generateTurnThresholds returns the initial state for turn thresholds\n")
	fmt.Fprintf(w, "func generateTurnThresholds() []*TurnThreshold {\n")
	fmt.Fprintf(w, "    return []*TurnThreshold{\n")
	for _, v := range y.TurnThresholds {
		fmt.Fprintf(w, "        &TurnThreshold{\n")
		if v.Threshold != 0 {
			fmt.Fprintf(w, "            Threshold: %d,\n", v.Threshold)
		}
		if v.PointLoss != 0 {
			fmt.Fprintf(w, "            PointLoss: %d,\n", v.PointLoss)
		}
		if len(v.Message) != 0 {
			fmt.Fprintf(w, "            Message: []string{\n")
			for _, s := range strings.Split(v.Message, "\n") {
				fmt.Fprintf(w, "                %q,\n", s)
			}
			fmt.Fprintf(w, "            },\n")
		}
		fmt.Fprintf(w, "        },\n")
	}
	fmt.Fprintf(w, "    }\n")
	fmt.Fprintf(w, "}\n")
	fmt.Fprintf(w, "\n")

	return nil
}
